// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "SignalrApi.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

/// Transport method of the signalr connection.
@implementation FLTTransportBox
- (instancetype)initWithValue:(FLTTransport)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// SignalR connection status
@implementation FLTConnectionStatusBox
- (instancetype)initWithValue:(FLTConnectionStatus)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface FLTConnectionOptions ()
+ (FLTConnectionOptions *)fromList:(NSArray<id> *)list;
+ (nullable FLTConnectionOptions *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FLTStatusChangeResult ()
+ (FLTStatusChangeResult *)fromList:(NSArray<id> *)list;
+ (nullable FLTStatusChangeResult *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation FLTConnectionOptions
+ (instancetype)makeWithBaseUrl:(nullable NSString *)baseUrl
    hubName:(nullable NSString *)hubName
    queryString:(nullable NSString *)queryString
    hubMethods:(nullable NSArray<NSString *> *)hubMethods
    headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    transport:(nullable FLTTransportBox *)transport {
  FLTConnectionOptions* pigeonResult = [[FLTConnectionOptions alloc] init];
  pigeonResult.baseUrl = baseUrl;
  pigeonResult.hubName = hubName;
  pigeonResult.queryString = queryString;
  pigeonResult.hubMethods = hubMethods;
  pigeonResult.headers = headers;
  pigeonResult.transport = transport;
  return pigeonResult;
}
+ (FLTConnectionOptions *)fromList:(NSArray<id> *)list {
  FLTConnectionOptions *pigeonResult = [[FLTConnectionOptions alloc] init];
  pigeonResult.baseUrl = GetNullableObjectAtIndex(list, 0);
  pigeonResult.hubName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.queryString = GetNullableObjectAtIndex(list, 2);
  pigeonResult.hubMethods = GetNullableObjectAtIndex(list, 3);
  pigeonResult.headers = GetNullableObjectAtIndex(list, 4);
  pigeonResult.transport = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable FLTConnectionOptions *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FLTConnectionOptions fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.baseUrl ?: [NSNull null],
    self.hubName ?: [NSNull null],
    self.queryString ?: [NSNull null],
    self.hubMethods ?: [NSNull null],
    self.headers ?: [NSNull null],
    self.transport ?: [NSNull null],
  ];
}
@end

@implementation FLTStatusChangeResult
+ (instancetype)makeWithConnectionId:(nullable NSString *)connectionId
    status:(nullable FLTConnectionStatusBox *)status
    errorMessage:(nullable NSString *)errorMessage {
  FLTStatusChangeResult* pigeonResult = [[FLTStatusChangeResult alloc] init];
  pigeonResult.connectionId = connectionId;
  pigeonResult.status = status;
  pigeonResult.errorMessage = errorMessage;
  return pigeonResult;
}
+ (FLTStatusChangeResult *)fromList:(NSArray<id> *)list {
  FLTStatusChangeResult *pigeonResult = [[FLTStatusChangeResult alloc] init];
  pigeonResult.connectionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.status = GetNullableObjectAtIndex(list, 1);
  pigeonResult.errorMessage = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FLTStatusChangeResult *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FLTStatusChangeResult fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.connectionId ?: [NSNull null],
    self.status ?: [NSNull null],
    self.errorMessage ?: [NSNull null],
  ];
}
@end

@interface FLTSignalrApiPigeonCodecReader : FlutterStandardReader
@end
@implementation FLTSignalrApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[FLTTransportBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[FLTConnectionStatusBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: 
      return [FLTConnectionOptions fromList:[self readValue]];
    case 132: 
      return [FLTStatusChangeResult fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTSignalrApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FLTSignalrApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTTransportBox class]]) {
    FLTTransportBox *box = (FLTTransportBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FLTConnectionStatusBox class]]) {
    FLTConnectionStatusBox *box = (FLTConnectionStatusBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FLTConnectionOptions class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTStatusChangeResult class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTSignalrApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTSignalrApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTSignalrApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTSignalrApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTGetSignalrApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTSignalrApiPigeonCodecReaderWriter *readerWriter = [[FLTSignalrApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFLTSignalRHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTSignalRHostApi> *api) {
  SetUpFLTSignalRHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFLTSignalRHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTSignalRHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRHostApi.connect", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FLTGetSignalrApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectConnectionOptions:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(connectConnectionOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FLTConnectionOptions *arg_connectionOptions = GetNullableObjectAtIndex(args, 0);
        [api connectConnectionOptions:arg_connectionOptions completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRHostApi.reconnect", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FLTGetSignalrApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reconnectWithCompletion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(reconnectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api reconnectWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRHostApi.stop", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FLTGetSignalrApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWithCompletion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(stopWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRHostApi.isConnected", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FLTGetSignalrApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isConnectedWithCompletion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(isConnectedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isConnectedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRHostApi.invokeMethod", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FLTGetSignalrApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(invokeMethodMethodName:arguments:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(invokeMethodMethodName:arguments:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_methodName = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_arguments = GetNullableObjectAtIndex(args, 1);
        [api invokeMethodMethodName:arg_methodName arguments:arg_arguments completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTSignalRPlatformApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FLTSignalRPlatformApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)onStatusChangeStatusChangeResult:(FLTStatusChangeResult *)arg_statusChangeResult completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRPlatformApi.onStatusChange", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTGetSignalrApiCodec()];
  [channel sendMessage:@[arg_statusChangeResult ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onNewMessageHubName:(NSString *)arg_hubName message:(NSString *)arg_message completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.signalr_flutter.SignalRPlatformApi.onNewMessage", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:FLTGetSignalrApiCodec()];
  [channel sendMessage:@[arg_hubName ?: [NSNull null], arg_message ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

